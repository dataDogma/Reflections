Reflect: Initializing a Repository

Q: What happens when you initialize a repository? Why do you need to do it?
A: Initializing a repo does 2 things:

    1. Git creates a hidden directory ".git" which contains meta info for
       helping git to track those file, view logs, commit changes etc.

    2. Git is able to track your files, which later wasn't the case!


Q: Why do you need to do it?
A: For git to track the files, it need a staging area where it could, hence
   we do it.

 Q: What happens when you initialize a repository? Why do you need to do it?
 A:

Q: How is the staging area different from the working directory and the repository?
   What value do you think it offers?

A: Staging area bundles the commits into one single commit.
Q: It's an intermediate stage, where we can review the commits before making
   as permanent commits. In terms of value, staging area prepares the commits
   before it get's permanent, so if we want to reset changes we can do so.
   by not adding the files to commit.

   We can reset: "git reset file_name"

 Q: How can you use the staging area to make sure you have one commit per logical
   change?
 A: Staging area bundles multiple commits into single commit into git repo.
    The key concept over here is to add a single file to staging area than commit
    it as one commit per logical change. Repeat the process until you are done.


 Q: What are some situations when branches would be helpful in keeping your history
   organized? How would branches help?
 A: Branching allows to test or experiment things before officially committing to
    a major change in our code base, it allows us to switch context in our project.

    - Git branching helps us to organize our code repository if we are sharing our
    work into public.
    - nightly builds often use branching methods to test out experimental features
      into software's or app's as new features, if the public approves, merge it
      to master branch.
    - It allows us to compartmentalize our work.

Q: How do the diagrams help you visualize the branch structure?
A: Diagrams gives a pictorial representation of the version-control tree, it's
   like tracing an entire tree structure to our commits and branches.

   It helps us to keep a visual track of what branches we have, where our head
   is pointing to a recent commit, and are there any untracked commits.
   What is the result of merging two branches together? Why do we represent it in
   the diagram the way we do?

Q: What are the pros and cons of Git's automatic merging vs. always doing merges
   manually?
A: Auto merging is a handy way to let Git do the heavy lifting for you, which
   would involve merging branches, creating a new commit(branch), deleting the
   merged branch into an existing master branch and finally if there were
   conflicts, than give feedback to the expert.

   Manual merging is flexible but quite tedious, further keeping track of
   conflicts is cumbersome and can lead to unnecessary changes that the expert
   might not know!

Q: What is the result of merging two branches together? Why do we represent it in
   the diagram the way we do?

A: The result of merging two branches together is to make the commits from one
    branch merge into the existing branch recursively added. This has several
    applications for e.g. An experimental feature was desirable into current
    feature list etc.

    We represent it in the diagram to keep track of the head and the labels of
    the merged branches.
